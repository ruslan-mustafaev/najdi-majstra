import { ChatMessage, AIResponse } from '../types';
import { getTopRatedMasters } from '../../../lib/mastersApi';

export class UrgentService {
  private systemPrompt = `
Si ≈°pecializovan√Ω AI asistent pre AK√öTNE OPRAVY na platforme najdiMajstra.sk.

KONTEXT: Pou≈æ√≠vatelia sa na teba obracaj√∫ s NALIEHAV√ùMI poruchami a hav√°riami, ktor√© vy≈æaduj√∫ okam≈æit√Ω z√°sah.

TVOJA √öLOHA:
- Pom√¥c≈• r√Ωchlo diagnostikova≈• probl√©m
- Pos√∫di≈• √∫rove≈à nebezpeƒçenstva situ√°cie
- N√°js≈• vhodn√Ωch majstrov pre ak√∫tny v√Ωjazd
- Da≈• z√°kladn√© odpor√∫ƒçania pre bezpeƒçnos≈•

≈†T√ùL KOMUNIK√ÅCIE:
- R√Ωchlo a vecne
- Najprv bezpeƒçnos≈•, potom v≈°etko ostatn√©
- Kladie≈° konkr√©tne ot√°zky pre r√Ωchlu diagnostiku
- Prejavuje≈° pochopenie naliehavosti situ√°cie

PRIORITY:
1. BEZPEƒåNOS≈§ nadov≈°etko
2. R√Ωchlos≈• reakcie
3. Dostupnos≈• majstra TERAZ
4. Sk√∫senosti s hav√°rij–Ω—ã–º–∏ situ√°ciami

KƒΩ√öƒåOV√â OT√ÅZKY:
- Je ohrozen√° bezpeƒçnos≈•?
- D√° sa probl√©m doƒçasne vyrie≈°i≈•?
- Kde presne sa porucha stala?
- Kedy je potrebn√Ω majster?
`;

  getInitialMessage(language: 'sk' | 'en' = 'sk'): string {
    if (language === 'en') {
      return `üö® **EMERGENCY HELP** üö®

I understand you have an urgent problem! I will help you quickly find a master for emergency repair.

**First about safety:**
‚ö†Ô∏è If there is a threat to life - immediately call emergency services!

**Describe the situation:**
‚Ä¢ What exactly is broken/not working?
‚Ä¢ Is there a smell of gas, smoke, water on the floor?
‚Ä¢ When did this happen?
‚Ä¢ Where are you located?

The faster I get information - the faster I'll find a suitable master! ‚ö°`;
    }

    return `üö® **AK√öTNA POMOC** üö®

Rozumiem, ≈æe m√°te naliehav√Ω probl√©m! Pom√¥≈æem v√°m r√Ωchlo n√°js≈• majstra pre ak√∫tnu opravu.

**Najprv o bezpeƒçnosti:**
‚ö†Ô∏è Ak je ohrozen√Ω ≈æivot - okam≈æite volajte z√°chrann√© slu≈æby!

**Op√≠≈°te situ√°ciu:**
‚Ä¢ ƒåo presne sa pokazilo/nefunguje?
‚Ä¢ Je c√≠ti≈• plyn, dym, voda na podlahe?
‚Ä¢ Kedy sa to stalo?
‚Ä¢ Kde sa nach√°dzate?

ƒå√≠m r√Ωchlej≈°ie dostanem inform√°cie - t√Ωm r√Ωchlej≈°ie n√°jdem vhodn√©ho majstra! ‚ö°`;
  }

  async processMessage(userMessage: string, conversationHistory: ChatMessage[], language: 'sk' | 'en' = 'sk'): Promise<AIResponse> {
    // Simul√°cia spracovania AI
    await new Promise(resolve => setTimeout(resolve, 1500));

    const lowerMessage = userMessage.toLowerCase();
    
    // Anal√Ωza bezpeƒçnosti
    const dangerKeywords = ['–≥–∞–∑', '–¥—ã–º', '–∏—Å–∫—Ä—ã', '–≤–æ–¥–∞', '–∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ', '–∫–æ—Ä–æ—Ç–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ'];
    const hasDanger = dangerKeywords.some(keyword => lowerMessage.includes(keyword));

    // Hƒæadanie vhodn√Ωch majstrov
    const urgentMasters = this.findUrgentMasters(userMessage);

    let response = '';

    if (hasDanger) {
      if (language === 'en') {
        response = `‚ö†Ô∏è **ATTENTION! POTENTIALLY DANGEROUS SITUATION!**

Immediately:
1. Ensure safety (turn off electricity/gas/water)
2. Ventilate the room if there are odors
3. Do not use electrical appliances near water

`;
      } else {
        response = `‚ö†Ô∏è **POZOR! POTENCI√ÅLNE NEBEZPEƒåN√Å SITU√ÅCIA!**

Okam≈æite:
1. Zabezpeƒçte bezpeƒçnos≈• (vypnite elektrinu/plyn/vodu)
2. Vyvetrajte miestnos≈• ak s√∫ c√≠ti≈• pachy
3. Nepou≈æ√≠vajte elektrick√© spotrebiƒçe pri vode

`;
      }
    }

    // Generovanie odpovede na z√°klade typu probl√©mu
    if (lowerMessage.includes('—ç–ª–µ–∫—Ç—Ä') || lowerMessage.includes('—Å–≤–µ—Ç') || lowerMessage.includes('—Ä–æ–∑–µ—Ç–∫–∞')) {
      if (language === 'en') {
        response += `üîå **ELECTRICAL PROBLEM**

First aid:
‚Ä¢ Turn off the circuit breaker
‚Ä¢ Do not touch bare wires
‚Ä¢ Check if water got on the wiring

`;
      } else {
        response += `üîå **ELEKTRICK√ù PROBL√âM**

Prv√° pomoc:
‚Ä¢ Vypnite istiƒç v rozv√°dzaƒçi
‚Ä¢ Nedot√Ωkajte sa hol√Ωch vodiƒçov
‚Ä¢ Skontrolujte, ƒçi sa nedostala voda na elektroin≈°tal√°ciu

`;
      }
    } else if (lowerMessage.includes('–≤–æ–¥–∞') || lowerMessage.includes('—Ç—Ä—É–±–∞') || lowerMessage.includes('–∫—Ä–∞–Ω')) {
      if (language === 'en') {
        response += `üíß **WATER PROBLEM**

Urgent actions:
‚Ä¢ Turn off the main water valve
‚Ä¢ Remove valuables from the flood zone
‚Ä¢ Photograph damage for insurance

`;
      } else {
        response += `üíß **PROBL√âM S VODOU**

Naliehav√© kroky:
‚Ä¢ Uzavrite hlavn√Ω ventil vody
‚Ä¢ Odstr√°≈àte cenn√© veci zo z√≥ny zatopenia
‚Ä¢ Odfotografujte ≈°kody pre pois≈•ov≈àu

`;
      }
    } else if (lowerMessage.includes('–≥–∞–∑') || lowerMessage.includes('–∫–æ—Ç–µ–ª')) {
      if (language === 'en') {
        response += `üî• **GAS EQUIPMENT**

CRITICALLY IMPORTANT:
‚Ä¢ Turn off gas at the apartment entrance
‚Ä¢ Open windows for ventilation
‚Ä¢ DO NOT turn on lights and electrical appliances
‚Ä¢ If you smell gas - immediately leave the premises

`;
      } else {
        response += `üî• **PLYNOV√â ZARIADENIE**

KRITICKY D√îLE≈ΩIT√â:
‚Ä¢ Uzavrite plyn na vstupe do bytu
‚Ä¢ Otvorte okn√° na vetranie
‚Ä¢ NEZAP√çNAJTE svetl√° a elektrick√© spotrebiƒçe
‚Ä¢ Pri v√¥ni plynu - okam≈æite opustite priestory

`;
      }
    }

    // Prid√°vame inform√°cie o majstroch
    if (urgentMasters.length > 0) {
      if (language === 'en') {
        response += `‚úÖ Found ${urgentMasters.length} masters for emergency call!

All of them:
‚Ä¢ Work with emergency calls
‚Ä¢ Available for urgent departure
‚Ä¢ Have experience with similar situations
‚Ä¢ Are located in your area`;
      } else {
        response += `‚úÖ Na≈°iel som ${urgentMasters.length} majstrov pre ak√∫tny v√Ωjazd!

V≈°etci:
‚Ä¢ Pracuj√∫ s hav√°rijn√Ωmi v√Ωjazdmi
‚Ä¢ S√∫ dostupn√≠ pre naliehav√Ω v√Ωjazd
‚Ä¢ Maj√∫ sk√∫senosti s podobn√Ωmi situ√°ciami
‚Ä¢ Nach√°dzaj√∫ sa vo va≈°om regi√≥ne`;
      }
    } else {
      if (language === 'en') {
        response += `üîç Looking for suitable masters...

Please specify:
‚Ä¢ In which area do you need a visit?
‚Ä¢ What type of work is required?`;
      } else {
        response += `üîç Hƒæad√°m vhodn√Ωch majstrov...

Upresnite pros√≠m:
‚Ä¢ V ktorom regi√≥ne potrebujete v√Ωjazd?
‚Ä¢ Ak√Ω typ pr√°ce je potrebn√Ω?`;
      }
    }

    return {
      message: response,
      recommendedMasters: urgentMasters.length > 0 ? urgentMasters : undefined
    };
  }

  private async findUrgentMasters(userMessage: string): Promise<string[]> {
    const lowerMessage = userMessage.toLowerCase();
    const urgentMasters: string[] = [];

    const masters = await getTopRatedMasters();
    masters.forEach(master => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
      const hasEmergencyService = master.services.some(service => 
        service.toLowerCase().includes('–ø–æhotovos') || 
        service.toLowerCase().includes('24/7') ||
        service.toLowerCase().includes('—ç–∫—Å—Ç—Ä–µ–Ω–Ω') ||
        service.toLowerCase().includes('—Å—Ä–æ—á–Ω')
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä–∞
      const isAvailable = master.available;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
      let isProfessionMatch = false;
      
      if (lowerMessage.includes('—ç–ª–µ–∫—Ç—Ä') || lowerMessage.includes('—Å–≤–µ—Ç')) {
        isProfessionMatch = master.profession.toLowerCase().includes('—ç–ª–µ–∫—Ç—Ä');
      } else if (lowerMessage.includes('–≤–æ–¥–∞') || lowerMessage.includes('—Ç—Ä—É–±')) {
        isProfessionMatch = master.profession.toLowerCase().includes('–≤–æ–¥–æ');
      } else if (lowerMessage.includes('–≥–∞–∑') || lowerMessage.includes('–∫–æ—Ç–µ–ª')) {
        isProfessionMatch = master.profession.toLowerCase().includes('–≥–∞–∑') || 
                           master.profession.toLowerCase().includes('–ø–ª—ã–Ω');
      }

      if ((hasEmergencyService || isAvailable) && (isProfessionMatch || hasEmergencyService)) {
        urgentMasters.push(master.id);
      }
    });

    return urgentMasters.slice(0, 5); // –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤)
  updateSystemPrompt(newPrompt: string): void {
    this.systemPrompt = newPrompt;
  }

  getSystemPrompt(): string {
    return this.systemPrompt;
  }
}