// components/masterdashboard/MasterDashboard.tsx

import React, { useState } from 'react';
import { useAuth } from '../../hooks/useAuth';
import { saveMasterProfile } from '../../lib/masterProfileApi';
import { 
  MasterDashboardProps, 
  TabType, 
  ProfileData, 
  MasterProfile, 
  CalendarAvailability, 
  Projects, 
  ProjectPhaseType 
} from './types';
import { ProfilePhotos } from './ProfilePhotos';
import { ProfileIdentity } from './ProfileIdentity';
import { ProfileContact } from './ProfileContact';
import { MasterCalendar } from './MasterCalendar';
import { ProjectManagement } from './ProjectManagement';
import { PaymentsSubscriptions } from './PaymentsSubscriptions';

export const MasterDashboard: React.FC<MasterDashboardProps> = ({ onBack, onProfileUpdate }) => {
  const { user } = useAuth();
  const [activeTab, setActiveTab] = useState<TabType>('profile');
  const [editingField, setEditingField] = useState<string | null>(null);
  const [hasChanges, setHasChanges] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  
  // Calendar state
  const [currentDate, setCurrentDate] = useState(new Date());
  const [availability, setAvailability] = useState<CalendarAvailability>({});
  
  // Projects state
  const [selectedProject, setSelectedProject] = useState<string | null>(null);
  const [showNewProjectModal, setShowNewProjectModal] = useState(false);
  const [newProjectName, setNewProjectName] = useState('');
  const [projects, setProjects] = useState<Projects>({
    'project1': {
      name: 'Rekonštrukcia kúpeľne',
      phases: {
        priprava: { notes: [
          { id: '1', text: 'Nakúpiť obkladačky', completed: true },
          { id: '2', text: 'Zmerať priestor', completed: true },
          { id: '3', text: 'Objednať vanu', completed: false }
        ]},
        realizacia: { notes: [
          { id: '4', text: 'Zdemontovať staré obklady', completed: true },
          { id: '5', text: 'Inštalovať nové potrubie', completed: false }
        ]},
        ukoncenie: { notes: [
          { id: '6', text: 'Finálne čistenie', completed: false }
        ]}
      }
    },
    'project2': {
      name: 'Elektroinštalácia v byte',
      phases: {
        priprava: { notes: [
          { id: '7', text: 'Nakresliť schému', completed: true }
        ]},
        realizacia: { notes: [
          { id: '8', text: 'Vyfrézovať drážky', completed: false }
        ]},
        ukoncenie: { notes: [] }
      }
    }
  });
  const [newNoteText, setNewNoteText] = useState('');
  const [activePhase, setActivePhase] = useState<ProjectPhaseType>('priprava');
  
  const [profileData, setProfileData] = useState<ProfileData>({
    name: user?.user_metadata?.full_name || user?.user_metadata?.first_name + ' ' + user?.user_metadata?.last_name || '',
    profession: user?.user_metadata?.profession || '',
    location: user?.user_metadata?.location || '',
    workRadius: '',
    description: user?.user_metadata?.description || '',
    experience: user?.user_metadata?.experience || '',
    services: '',
    expertise: '',
    teamSize: 'individual',
    serviceTypes: [],
    languages: '',
    hourlyRate: '',
    availability: {
      schedule: '',
      available: true
    },
    contact: {
      phone: user?.user_metadata?.phone || '',
      email: user?.email || '',
      website: user?.user_metadata?.website || '',
      socialMedia: {
        facebook: '',
        instagram: '',
        youtube: '',
        tiktok: ''
      }
    },
    certifications: []
  });

  // Profile handlers
  const handleSave = async () => {
    setIsSaving(true);
    
    try {
      const profileForDB: MasterProfile = {
        name: profileData.name,
        profession: profileData.profession,
        email: profileData.contact.email,
        phone: profileData.contact.phone,
        location: profileData.location,
        description: profileData.description,
        is_active: profileData.availability.available,
        profile_completed: true
      };

      const savedProfile = await saveMasterProfile(profileForDB);
      
      setEditingField(null);
      setHasChanges(false);
      
      if (onProfileUpdate) {
        onProfileUpdate(savedProfile);
      }
      
      console.log('Profile saved to Supabase:', savedProfile);
      
    } catch (error) {
      console.error('Error saving profile:', error);
      alert('Ошибка при сохранении профиля. Попробуйте снова.');
    } finally {
      setIsSaving(false);
    }
  };

  const handleFieldChange = (field: string, value: any) => {
    setProfileData(prev => ({ ...prev, [field]: value }));
    setHasChanges(true);
  };

  const handleNestedFieldChange = (parentField: string, childField: string, value: any) => {
    setProfileData(prev => ({
      ...prev,
      [parentField]: {
        ...prev[parentField as keyof typeof prev] as any,
        [childField]: value
      }
    }));
    setHasChanges(true);
  };

  const startEditing = (field: string) => {
    setEditingField(field);
  };

  const cancelEditing = () => {
    setEditingField(null);
    setHasChanges(false);
  };

  // Calendar handlers
  const formatDateKey = (date: Date) => {
    return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;
  };

  const navigateMonth = (direction: 'prev' | 'next') => {
    setCurrentDate(prev => {
      const newDate = new Date(prev);
      if (direction === 'prev') {
        newDate.setMonth(prev.getMonth() - 1);
      } else {
        newDate.setMonth(prev.getMonth() + 1);
      }
      return newDate;
    });
  };

  const toggleDateAvailability = (date: Date) => {
    const dateKey = formatDateKey(date);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    if (date < today) return;
    
    setAvailability(prev => {
      const current = prev[dateKey] || 'unavailable';
      let newStatus: 'available' | 'unavailable' | 'booked';
      
      if (current === 'unavailable') {
        newStatus = 'available';
      } else if (current === 'available') {
        newStatus = 'booked';
      } else {
        newStatus = 'unavailable';
      }
      
      return {
        ...prev,
        [dateKey]: newStatus
      };
    });
  };

  const setTodayStatus = (status: 'available' | 'unavailable') => {
    const today = new Date();
    const dateKey = formatDateKey(today);
    setAvailability(prev => ({
      ...prev,
      [dateKey]: status
    }));
  };

  // Project handlers
  const addNewProject = () => {
    if (!newProjectName.trim() || Object.keys(projects).length >= 20) return;
    
    const projectId = `project${Date.now()}`;
    const newProject = {
      name: newProjectName.trim(),
      phases: {
        priprava: { notes: [] },
        realizacia: { notes: [] },
        ukoncenie: { notes: [] }
      }
    };
    
    setProjects(prev => ({
      ...prev,
      [projectId]: newProject
    }));
    
    setNewProjectName('');
    setShowNewProjectModal(false);
    setSelectedProject(projectId);
  };

  const addNote = (projectId: string, phase: ProjectPhaseType, text: string) => {
    if (!text.trim()) return;
    
    const currentPhaseNotes = projects[projectId]?.phases[phase]?.notes || [];
    if (currentPhaseNotes.length >= 10) return;
    
    const newNote = {
      id: Date.now().toString(),
      text: text.trim(),
      completed: false
    };
    
    setProjects(prev => ({
      ...prev,
      [projectId]: {
        ...prev[projectId],
        phases: {
          ...prev[projectId].phases,
          [phase]: {
            notes: [...currentPhaseNotes, newNote]
          }
        }
      }
    }));
    
    setNewNoteText('');
  };

  const toggleNoteCompletion = (projectId: string, phase: ProjectPhaseType, noteId: string) => {
    setProjects(prev => ({
      ...prev,
      [projectId]: {
        ...prev[projectId],
        phases: {
          ...prev[projectId].phases,
          [phase]: {
            notes: prev[projectId].phases[phase].notes.map(note =>
              note.id === noteId ? { ...note, completed: !note.completed } : note
            )
          }
        }
      }
    }));
  };

  const deleteNote = (projectId: string, phase: ProjectPhaseType, noteId: string) => {
    setProjects(prev => ({
      ...prev,
      [projectId]: {
        ...prev[projectId],
        phases: {
          ...prev[projectId].phases,
          [phase]: {
            notes: prev[projectId].phases[phase].notes.filter(note => note.id !== noteId)
          }
        }
      }
    }));
  };

  const calculateProjectProgress = (projectId: string) => {
    const project = projects[projectId];
    if (!project) return 0;
    
    const allNotes = [
      ...project.phases.priprava.notes,
      ...project.phases.realizacia.notes,
      ...project.phases.ukoncenie.notes
    ];
    
    if (allNotes.length === 0) return 0;
    
    const completedNotes = allNotes.filter(note => note.completed).length;
    return Math.round((completedNotes / allNotes.length) * 100);
  };

  return (
    <div className="min-h-screen bg-gray-50 pt-16">
      {/* Navigation Tabs */}
      <div className="bg-white shadow-sm">
        <div className="container mx-auto px-4">
          <div className="flex space-x-8">
            <button
              onClick={() => setActiveTab('profile')}
              className={`py-4 px-2 border-b-2 font-medium text-sm ${
                activeTab === 'profile'
                  ? 'border-[#4169e1] text-[#4169e1]'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              Môj profil
            </button>
            <button
              onClick={() => setActiveTab('calendar')}
              className={`py-4 px-2 border-b-2 font-medium text-sm ${
                activeTab === 'calendar'
                  ? 'border-[#4169e1] text-[#4169e1]'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              Kalendár dostupnosti
            </button>
            <button
              onClick={() => setActiveTab('projects')}
              className={`py-4 px-2 border-b-2 font-medium text-sm ${
                activeTab === 'projects'
                  ? 'border-[#4169e1] text-[#4169e1]'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              Navigácia Stavby
            </button>
            <button
              onClick={() => setActiveTab('payments')}
              className={`py-4 px-2 border-b-2 font-medium text-sm ${
                activeTab === 'payments'
                  ? 'border-[#4169e1] text-[#4169e1]'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              Platby a predplatné
            </button>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-8">
        {activeTab === 'profile' && (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div className="space-y-6">
              <ProfilePhotos
                profileData={profileData}
                editingField={editingField}
                hasChanges={hasChanges}
                onFieldChange={handleFieldChange}
                onNestedFieldChange={handleNestedFieldChange}
                onStartEditing={startEditing}
                onSave={handleSave}
                onCancel={cancelEditing}
                isSaving={isSaving}
              />
            </div>
            <div className="space-y-6">
              <ProfileIdentity
                profileData={profileData}
                editingField={editingField}
                hasChanges={hasChanges}
                onFieldChange={handleFieldChange}
                onNestedFieldChange={handleNestedFieldChange}
                onStartEditing={startEditing}
                onSave={handleSave}
                onCancel={cancelEditing}
                isSaving={isSaving}
              />
            </div>
            <div className="space-y-6">
              <ProfileContact
                profileData={profileData}
                editingField={editingField}
                hasChanges={hasChanges}
                onFieldChange={handleFieldChange}
                onNestedFieldChange={handleNestedFieldChange}
                onStartEditing={startEditing}
                onSave={handleSave}
                onCancel={cancelEditing}
                isSaving={isSaving}
              />
            </div>
          </div>
        )}

        {activeTab === 'calendar' && (
          <MasterCalendar
            currentDate={currentDate}
            availability={availability}
            onDateChange={setCurrentDate}
            onToggleAvailability={toggleDateAvailability}
            onNavigateMonth={navigateMonth}
            onSetTodayStatus={setTodayStatus}
          />
        )}

        {activeTab === 'projects' && (
          <ProjectManagement
            projects={projects}
            selectedProject={selectedProject}
            activePhase={activePhase}
            newNoteText={newNoteText}
            showNewProjectModal={showNewProjectModal}
            newProjectName={newProjectName}
            onSelectProject={setSelectedProject}
            onSetActivePhase={setActivePhase}
            onAddNote={addNote}
            onToggleNote={toggleNoteCompletion}
            onDeleteNote={deleteNote}
            onAddProject={addNewProject}
            onSetNewNoteText={setNewNoteText}
            onShowNewProjectModal={setShowNewProjectModal}
            onSetNewProjectName={setNewProjectName}
            calculateProgress={calculateProjectProgress}
          />
        )}

        {activeTab === 'payments' && <PaymentsSubscriptions />}
      </div>
    </div>
  );
};