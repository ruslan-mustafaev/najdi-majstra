import { supabase } from './supabase';
import { checkConnection } from './supabase';

const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
const CACHE_KEY = 'masters_cache';
const CACHE_TIMESTAMP_KEY = 'masters_cache_timestamp';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞ –∏–∑ localStorage
const loadCacheFromStorage = () => {
  try {
    const cached = localStorage.getItem(CACHE_KEY);
    const timestamp = localStorage.getItem(CACHE_TIMESTAMP_KEY);

    if (cached && timestamp) {
      const now = Date.now();
      const cacheAge = now - parseInt(timestamp, 10);

      if (cacheAge < CACHE_DURATION) {
        return JSON.parse(cached);
      } else {
        localStorage.removeItem(CACHE_KEY);
        localStorage.removeItem(CACHE_TIMESTAMP_KEY);
      }
    }
  } catch (error) {
    console.error('Error loading cache:', error);
    localStorage.removeItem(CACHE_KEY);
    localStorage.removeItem(CACHE_TIMESTAMP_KEY);
  }
  return null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞ –≤ localStorage
const saveCacheToStorage = (masters: any[]) => {
  try {
    localStorage.setItem(CACHE_KEY, JSON.stringify(masters));
    localStorage.setItem(CACHE_TIMESTAMP_KEY, Date.now().toString());
  } catch (error) {
    console.error('Error saving cache:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö (–ù–ï –¢–†–û–ì–ê–ï–¢ –°–ï–°–°–ò–Æ!)
const clearCache = () => {
  try {
    localStorage.removeItem(CACHE_KEY);
    localStorage.removeItem(CACHE_TIMESTAMP_KEY);
    // –û—á–∏—â–∞–µ–º –¢–û–õ–¨–ö–û –∫–µ—à–∏ –º–∞—Å—Ç–µ—Ä–æ–≤, –ù–ï –¢–†–û–ì–ê–ï–ú supabase —Å–µ—Å—Å–∏—é!
    Object.keys(localStorage).forEach(key => {
      if ((key.includes('masters') || key.includes('cache')) && !key.includes('supabase')) {
        localStorage.removeItem(key);
      }
    });
  } catch (error) {
    console.error('Error clearing cache:', error);
  }
};

export const getTopRatedMasters = async () => {
  console.log('üîç MASTERS_API: getTopRatedMasters called');

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à - –µ—Å–ª–∏ –µ—Å—Ç—å, –æ—Ç–¥–∞–µ–º –µ–≥–æ —Å—Ä–∞–∑—É
    const cachedMasters = loadCacheFromStorage();
    console.log('üì¶ MASTERS_API: Cache check result:', {
      hasCached: !!cachedMasters,
      count: cachedMasters?.length || 0
    });

    if (cachedMasters && cachedMasters.length > 0) {
      console.log('‚úÖ MASTERS_API: Returning cached masters');
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      setTimeout(() => {
        loadFromDatabase().catch(err => {
          console.warn('Background update failed:', err.message);
        });
      }, 100);
      return cachedMasters;
    }

    // –ï—Å–ª–∏ –∫–µ—à–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º
    console.log('üîå MASTERS_API: No cache, checking connection...');
    const isConnected = await checkConnection();
    console.log('üîå MASTERS_API: Connection result:', isConnected);

    if (!isConnected) {
      throw new Error('Database connection failed');
    }

    console.log('üì° MASTERS_API: Loading from database...');
    const result = await loadFromDatabase();
    console.log('‚úÖ MASTERS_API: Loaded from DB:', result.length, 'masters');
    return result;
  } catch (error) {
    console.error('‚ùå MASTERS_API: Get masters error:', error);
    throw error;
  }
};

const loadFromDatabase = async () => {
  console.log('üíæ LOAD_DB: Starting database load...');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    console.log('üîå LOAD_DB: Checking connection...');
    const isConnected = await checkConnection();
    console.log('üîå LOAD_DB: Connection check result:', isConnected);

    if (!isConnected) {
      throw new Error('Database connection check failed');
    }

    console.log('üì° LOAD_DB: Executing query to masters table...');
    const { data, error } = await supabase
      .from('masters')
      .select('*')
      .eq('is_active', true)
      .eq('profile_completed', true)
      .limit(10);

    console.log('üìä LOAD_DB: Query result:', {
      hasData: !!data,
      count: data?.length || 0,
      hasError: !!error,
      error: error?.message
    });

    if (error) {
      console.error('‚ùå LOAD_DB: Database error:', {
        message: error.message,
        code: error.code,
        details: error.details,
        hint: error.hint
      });

      throw error;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –≤ —Ñ–æ—Ä–º–∞—Ç Master
    const masters = (data || []).map(master => ({
      id: master.id,
      name: master.name || '–ë–µ–∑ –∏–º–µ–Ω–∏',
      profession: master.profession || 'Majster',
      location: master.location || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      rating: master.rating || 4.5,
      reviewCount: master.reviews_count || 0,
      available: master.is_available ?? master.is_active,
      profileImage: master.profile_image_url || '/placeholder-avatar.svg',
      workImages: master.work_images_urls || [],
      workVideos: master.work_video_url || [],
      description: master.description || 'Profesion√°lny majster s pracovn√Ωmi sk√∫senos≈•ami',
      services: ['Opravy', 'In≈°tal√°cie', 'Servis'],
      experience: '5+ rokov',
      certifications: ['Odborn√° sp√¥sobilos≈•'],
      expertise: ['V≈°eobecn√© pr√°ce'],
      teamSize: 'individual' as const,
      serviceTypes: ['individuals'],
      languages: ['Slovenƒçina'],
      priceRange: '25-45 ‚Ç¨/hod',
      subscriptionPlan: 'standard',
      communicationStyle: master.communication_style || undefined,
      workingHours: {
        monday: '8:00 - 18:00',
        tuesday: '8:00 - 18:00',
        wednesday: '8:00 - 18:00',
        thursday: '8:00 - 18:00',
        friday: '8:00 - 18:00',
        saturday: '9:00 - 16:00',
        sunday: '9:00 - 15:00'
      },
      contact: {
        phone: master.phone || '+421 9xx xxx xxx',
        email: master.email || '',
        website: '',
        socialMedia: {}
      },
      availability: {
        schedule: '8:00 - 18:00',
        workRadius: 'Lok√°lne + 50km'
      },
      serviceRegular: master.service_regular ?? false,
      serviceUrgent: master.service_urgent ?? false,
      serviceRealization: master.service_realization ?? false
    }));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    if (masters.length > 0) {
      saveCacheToStorage(masters);
    }

    return masters;

  } catch (err) {
    console.error('Exception in loadFromDatabase:', err);
    // –ù–ï –æ—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏!
    throw err;
  }
};